import React, { useState } from 'react';
import { MenuItem, Select, Checkbox, ListItemText, FormControl, InputLabel } from '@mui/material';

const YearMultiSelect = ({ currentYear }) => {
  const [selectedYears, setSelectedYears] = useState([]);
  const [selectedQuarters, setSelectedQuarters] = useState([]);
  const [selectedMonths, setSelectedMonths] = useState([]);

  const handleChange = (event) => {
    const { value } = event.target;

    // Check if the "Select All" option is selected
    if (value.includes('all')) {
      setSelectedYears((prevSelected) =>
        prevSelected.length === yearsList.length ? [] : yearsList.map((year) => year.toString())
      );
    } else {
      setSelectedYears(value);
      setSelectedQuarters([]);
      setSelectedMonths([]);
    }
  };
  const handleSelectAllQuarters = (event) => {
    console.log(quartersList)
    if (event.target.checked) {
      setSelectedQuarters((prevSelected) =>
      prevSelected.length === getQuartersForSelectedYears().length ? [] : getQuartersForSelectedYears().map((year) => year.toString())
    );
    } else {
      setSelectedQuarters([]);
    }
  };
  const handleSelectAllMonths = (event) => {
    if (event.target.checked) {
      setSelectedMonths((prevSelected) =>
      prevSelected.length === getMonthsForSelectedQuarters().length ? [] : getMonthsForSelectedQuarters().map((months) => months.toString())
    );
    } else {
      setSelectedMonths([]);
    }
  };
  const handleChangeQuarters = (event) => {
    const { value } = event.target;
    setSelectedQuarters(value);
    setSelectedMonths([]);
  };

  const handleChangeMonths = (event) => {
    setSelectedMonths(event.target.value);
  };

  const yearsList = Array.from({ length: currentYear - 2020 }, (_, index) => 2021 + index);
  const quartersList = ['Q1', 'Q2', 'Q3', 'Q4'];

  const getQuartersForSelectedYears = () => {
    return selectedYears.reduce((quarters, year) => {
      return quarters.concat(quartersList.map((quarter) => `${year}-${quarter}`));
    }, []);
  };
  
  const monthsList = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ];

  const getMonthsForQuarter = (quarterString) => {
    // const quarterNumber = parseInt(quarter.charAt(1));
    // console.log(quarterNumber, quarter)
    // const startMonthIndex = (quarterNumber - 1) * 3;
    // return monthsList.slice(startMonthIndex, startMonthIndex + 3);

    const [yearString, quarter] = quarterString.split('-Q');
  const year = parseInt(yearString, 10);
  const quarterNumber = parseInt(quarter, 10);

  const startMonthIndex = (quarterNumber - 1) * 3;
  return monthsList.slice(startMonthIndex, startMonthIndex + 3).map((month) => `${year}-${month}`);
  };

  // const allMonths = selectedQuarters.reduce((acc, quarter) => {
  //   if (selectedQuarters.includes(quarter)) {
  //     return acc.concat(getMonthsForQuarter(quarter).map((month) => `${quarter}-${month}`));
  //   }
  //   return acc;
  // }, []);
  const getMonthsForSelectedQuarters = () => {
    return selectedQuarters.reduce((acc, quarter) => {
     console.log(acc, quarter, selectedQuarters)
      if (selectedQuarters.includes(quarter)) {
        return acc.concat(getMonthsForQuarter(quarter).map((month) => `${quarter}-${month}`));
      }
      return acc;
    }, []);
  };

  const isAllQuartersSelected = selectedQuarters.length === quartersList.length;
  const isAllMonthsSelected = selectedMonths.length === monthsList.length;


  return (
    <div>
      <FormControl fullWidth>
        <InputLabel>Years</InputLabel>
        <Select
          multiple
          value={selectedYears}
          onChange={handleChange}
          renderValue={(selected) => (selected.length === yearsList.length ? 'All' : selected.join(', '))}
        >
          <MenuItem value="all">
            <Checkbox checked={selectedYears.length === yearsList.length} />
            <ListItemText primary="Select All" />
          </MenuItem>
          {yearsList.map((year) => (
            <MenuItem key={year} value={year.toString()}>
              <Checkbox checked={selectedYears.includes(year.toString())} />
              <ListItemText primary={year} />
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {selectedYears.length > 0 && (
        <FormControl fullWidth>
          <InputLabel>Quarters</InputLabel>
          <Select
            multiple
            value={selectedQuarters}
            onChange={handleChangeQuarters}
            renderValue={(selected) => selected.join(', ')}
          >
            <MenuItem value="all">
              <Checkbox
                checked={isAllQuartersSelected}
                indeterminate={!isAllQuartersSelected && selectedQuarters.length > 0}
                onChange={handleSelectAllQuarters}
              />
              <ListItemText primary="Select All" />
            </MenuItem>
            {getQuartersForSelectedYears().map((quarter) => (
              <MenuItem key={quarter} value={quarter}>
                <Checkbox checked={selectedQuarters.includes(quarter)} />
                <ListItemText primary={quarter} />
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      )}

{selectedQuarters.length > 0 && (
        <FormControl fullWidth>
          <InputLabel>Months</InputLabel>
          <Select
            multiple
            value={selectedMonths}
            onChange={handleChangeMonths}
            renderValue={(selected) => selected.join(', ')}
          >
             <MenuItem value="all">
              <Checkbox
                checked={isAllMonthsSelected}
                indeterminate={!isAllMonthsSelected && selectedMonths.length > 0}
                onChange={handleSelectAllMonths}
              />
              <ListItemText primary="Select All" />
            </MenuItem>
            {getMonthsForSelectedQuarters().map((month) => (
              <MenuItem key={month} value={month}>
                <Checkbox checked={selectedMonths.includes(month)} />
                <ListItemText primary={month} />
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      )}
    </div>
  );
};

export default YearMultiSelect;

